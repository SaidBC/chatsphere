// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String     @id @default(cuid())
  name          String?
  username      String?    @unique
  email         String?    @unique
  emailVerified DateTime?
  password      String?
  image         String?
  bio           String?    @db.Text
  role          String?    @default("user")
  accounts      Account[]
  sessions      Session[]
  apiTokens     ApiToken[]
  // Note: Relationships to Room, RoomMember, and Message have been moved to the backend API
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Note: Room, RoomMember, and Message models have been moved to the backend API
// These models are now handled by the react-live-chatroom-api service

model ApiToken {
  id          String    @id @default(cuid())
  token       String    @unique
  name        String
  type        TokenType @default(USER)
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  permissions Json      // Stores permissions as a JSON object
  createdAt   DateTime  @default(now())
  expiresAt   DateTime?
  lastUsedAt  DateTime?
  isRevoked   Boolean   @default(false)
}

enum TokenType {
  USER
  CLIENT
}
